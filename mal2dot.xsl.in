<?xml version='1.0' encoding='UTF-8'?><!-- -*- indent-tabs-mode: nil -*- -->
<!--
This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details.

You should have received a copy of the GNU Lesser General Public License
along with this program; see the file COPYING.LGPL.  If not, write to the
Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
-->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:mal="http://projectmallard.org/1.0/"
                xmlns:cache="http://projectmallard.org/cache/1.0/"
                xmlns:exsl="http://exslt.org/common"
                xmlns:str="http://exslt.org/strings"
                exclude-result-prefixes="mal cache exsl"
                version="1.0">

<xsl:param name="mal2dot.sections" select="false()"/>

<xsl:include href="@MAL_LINK@"/>
<xsl:variable name="mal.cache" select="/mal:cache"/>

<xsl:output method="text"/>

<xsl:variable name="tango_">
  <color>#fce94f</color>
  <color>#8ae234</color>
  <color>#e9b96e</color>
  <color>#f57900</color>
  <color>#ad7fa8</color>
  <color>#ef2929</color>
  <color>#729fcf</color>
</xsl:variable>
<xsl:variable name="tango" select="exsl:node-set($tango_)"/>

<xsl:template name="bgcolors">
  <xsl:param name="node"/>
  <xsl:param name="index"/>
  <xsl:choose>
    <xsl:when test="not($node)"/>
    <xsl:when test="$node/@id = 'index'">
      <xsl:call-template name="bgcolors">
        <xsl:with-param name="node" select="$node/following-sibling::mal:page[1]"/>
        <xsl:with-param name="index" select="$index"/>
      </xsl:call-template>
    </xsl:when>
    <xsl:when test="$node/preceding-sibling::mal:page[@prefix = $node/@prefix]">
      <xsl:call-template name="bgcolors">
        <xsl:with-param name="node" select="$node/following-sibling::mal:page[1]"/>
        <xsl:with-param name="index" select="$index"/>
      </xsl:call-template>
    </xsl:when>
    <xsl:otherwise>
      <color prefix="{$node/@prefix}">
        <xsl:value-of select="$tango/color[position() = ($index mod count($tango/color) + 1)]"/>
      </color>
      <xsl:call-template name="bgcolors">
        <xsl:with-param name="node" select="$node/following-sibling::mal:page[1]"/>
        <xsl:with-param name="index" select="$index + 1"/>
      </xsl:call-template>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:variable name="bgcolors_">
  <xsl:variable name="pages_">
    <xsl:for-each select="/cache:cache/mal:page">
      <mal:page id="{@id}">
        <xsl:attribute name="prefix">
          <xsl:choose>
            <xsl:when test="contains(@id, '-')">
              <xsl:value-of select="substring-before(@id, '-')"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="@id"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:attribute>
      </mal:page>
    </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="pages" select="exsl:node-set($pages_)/mal:page"/>
  <xsl:call-template name="bgcolors">
    <xsl:with-param name="node" select="$pages[1]"/>
    <xsl:with-param name="index" select="1"/>
  </xsl:call-template>
</xsl:variable>
<xsl:variable name="bgcolors" select="exsl:node-set($bgcolors_)/*"/>

<xsl:template match="cache:cache">
  <xsl:text>strict digraph topics {
width="3";
rankdir="LR";
splines="ortho";
node [shape=box,width=2,fontname=sans,fontsize=8,style=filled];
</xsl:text>
  <xsl:apply-templates mode="mal2dot.node.mode" select="mal:page"/>
  <xsl:apply-templates mode="mal2dot.edge.mode" select="mal:page"/>
  <xsl:text>}
</xsl:text>
</xsl:template>

<xsl:template mode="mal2dot.node.mode" match="mal:page | mal:section">
  <xsl:variable name="pageid" select="ancestor-or-self::mal:page[1]/@id"/>
  <xsl:variable name="prefix">
    <xsl:choose>
      <xsl:when test="contains($pageid, '-')">
        <xsl:value-of select="substring-before($pageid, '-')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$pageid"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>
  <xsl:variable name="bgcolor" select="string($bgcolors[@prefix = $prefix])"/>
  <xsl:text>"</xsl:text>
  <xsl:value-of select="@id"/>
  <xsl:text>" [tooltip="</xsl:text>
  <xsl:variable name="tooltip">
    <xsl:call-template name="mal.link.tooltip">
      <xsl:with-param name="xref" select="@id"/>
    </xsl:call-template>
  </xsl:variable>
  <xsl:value-of select="str:replace($tooltip, '&quot;', '\&quot;')"/>
  <xsl:text>"</xsl:text>
  <xsl:if test="$bgcolor != ''">
    <xsl:text>,fillcolor="</xsl:text>
    <xsl:value-of select="$bgcolor"/>
    <xsl:text>"</xsl:text>
  </xsl:if>
  <xsl:text>];&#x000A;</xsl:text>
  <xsl:if test="$mal2dot.sections">
    <xsl:apply-templates mode="mal2dot.node.mode" select="mal:section"/>
  </xsl:if>
</xsl:template>

<xsl:template mode="mal2dot.edge.mode" match="mal:page | mal:section">
  <xsl:variable name="id" select="@id"/>
  <xsl:variable name="links">
    <xsl:call-template name="mal.link.topiclinks"/>
    <xsl:choose>
      <xsl:when test="$mal2dot.sections">
        <xsl:for-each select="mal:section">
          <mal:link xref="{@id}"/>
        </xsl:for-each>
      </xsl:when>
      <xsl:otherwise>
        <xsl:for-each select=".//mal:section">
          <xsl:call-template name="mal.link.topiclinks"/>
        </xsl:for-each>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:copy-of select="mal:info/mal:link[@type = 'next']"/>
  </xsl:variable>
  <xsl:if test="$mal2dot.sections">
    <xsl:apply-templates mode="mal2dot.edge.mode" select="mal:section"/>
  </xsl:if>
  <xsl:for-each select="exsl:node-set($links)/mal:link">
    <xsl:text>"</xsl:text>
    <xsl:value-of select="$id"/>
    <xsl:text>" -> "</xsl:text>
    <xsl:choose>
      <xsl:when test="not($mal2dot.sections) and contains(@xref, '#')">
        <xsl:value-of select="substring-before(@xref, '#')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="@xref"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>";&#x000A;</xsl:text>
  </xsl:for-each>
</xsl:template>

</xsl:stylesheet>
